#!/usr/bin/env node

/**
 * Module dependencies.
 */
const debug = require('debug')('api:server');
const http = require('http');
const socketio = require('socket.io');


const app = require('../app');

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (Number.isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP/HTTPS server.
 */


const server = http.createServer(app);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// websocket handler for dotmocracy
const io = socketio.listen(server);

const dotmocracy = io.of('/dotmocracy');


// in-memory cause I don't need these to persist (that will be a project for another day)
const names = {};
const dotmocracies = {};

const getroom = (userid) => (
  Object.keys(dotmocracies).find((roomname) => (
    dotmocracies[roomname].members.find(({ userId }) => userId === userid)))
);

dotmocracy.on('connection', (socket) => {
  socket.on('name', (name, ack) => {
    const hasName = names[socket.client.id] !== undefined;
    const trimmedName = name.trim();
    if (!hasName && trimmedName) {
      names[socket.client.id] = trimmedName;
      ack(true);
    } else {
      ack(false);
    }
  });

  socket.on('create room', (room, normalVotes, deciderVotes, ack) => {
    const userId = socket.client.id;
    const nameOfUser = names[userId];
    if (!nameOfUser) {
      socket.emit('msg', 'No name found for your user id');
      ack(false);
      return;
    }
    if (!room) {
      socket.emit('msg', 'Room name cannot be empty');
      ack(false);
      return;
    }
    if (dotmocracies[room] !== undefined) {
      socket.emit('msg', `Room ${room} already exists`);
      ack(false);
      return;
    }
    const existingRoom = getroom(userId);
    if (existingRoom) {
      socket.emit('msg', 'You are already in another room');
      ack(false);
      return;
    }
    socket.join(room);
    const userData = {
      userId,
      name: nameOfUser,
      votesCast: 0,
      isDecider: false,
    };
    dotmocracies[room] = {
      name: room,
      postits: [],
      members: [userData],
      normalVotes: normalVotes > 0 ? normalVotes : 5,
      deciderVotes: deciderVotes > 0 ? deciderVotes : 1,
      decider: null,
    };
    socket.join(room);
    socket.emit('msg', `Room ${room} created`);
    socket.emit('init room', dotmocracies[room]);
    ack(true);
  });

  socket.on('join room', (room, ack) => {
    const userId = socket.client.id;
    const nameOfUser = names[userId];
    if (!nameOfUser) {
      socket.emit('msg', 'No name found for your user id');
      ack(false);
      return;
    }
    const existingRoom = getroom(userId);
    if (existingRoom) {
      ack(false);
      return;
    }
    if (dotmocracies[room] === undefined) {
      ack(false);
      return;
    }
    socket.join(room);
    ack(true);
    const userData = {
      userId,
      name: nameOfUser,
      votesCast: 0,
      isDecider: false,
    };
    dotmocracies[room].members.push(userData);
    socket.emit('msg', `Welcome to room ${room}.`);
    socket.emit('init room', dotmocracies[room]);
    socket.in(room).emit('msg', `${nameOfUser} joined the room!`);
    socket.in(room).emit('new user', userData);
  });

  socket.on('make postit', (text, ack) => {
    const room = getroom(socket.client.id);
    if (!room) {
      ack(false);
      return;
    }
    const existingPostits = dotmocracies[room].postits;
    if (existingPostits.find((existingPostit) => existingPostit.text === text)) {
      ack(false);
      return;
    }
    const newPostit = {
      text,
      dots: [],
    };
    dotmocracies[room].postits.push(newPostit);
    socket.emit('new postit', newPostit);
    socket.in(room).emit('new postit', newPostit);
    ack(true);
  });

  socket.on('decider signup', () => {
    const room = getroom(socket.client.id);
    if (!room) {
      socket.emit('msg', 'You are not a member of any rooms');
    }
    if (dotmocracies[room].decider) {
      socket.emit('msg', 'Room already has a decider');
      return;
    }
    const user = dotmocracies[room].members
      .find(({ userId }) => userId === socket.client.id);
    if (!user) {
      socket.emit('msg', 'Unknown error');
      return;
    }
    if (user.votesCast) {
      socket.emit('msg', 'You have already begun voting');
      return;
    }

    dotmocracies[room].decider = socket.client.id;
    user.isDecider = true;
    socket.emit('set decider', socket.client.id);
    socket.in(room).emit('set decider', socket.client.id);
  });

  socket.on('vote', (postit, coordinates) => {
    const room = getroom(socket.client.id);
    if (!room) {
      return;
    }
    const postitObj = dotmocracies[room].postits
      .find(({ text }) => text === postit);
    if (!postitObj) {
      return;
    }
    const user = dotmocracies[room].members
      .find(({ userId }) => userId === socket.client.id);
    if (user.isDecider) {
      const vote = { coordinates, decider: true };
      // compare votesCast to deciderVotes
      // add a decider vote rather than regular vote
      if (user.votesCast >= dotmocracies[room].deciderVotes) {
        socket.emit('msg', 'You have used your votes');
        return;
      }
      user.votesCast += 1;
      postitObj.dots.push(vote);
      socket.emit('new vote', postit, vote);
      socket.in(room).emit('new vote', postit, vote);
      return;
    }
    if (user.votesCast >= dotmocracies[room].normalVotes) {
      socket.emit('msg', 'You have used your votes');
      return;
    }
    const vote = { coordinates, decider: false };
    user.votesCast += 1;
    postitObj.dots.push(vote);
    socket.emit('new vote', postit, vote);
    socket.in(room).emit('new vote', postit, vote);
  });

  socket.on('disconnect', () => {
    /* const descriptions = {
      'server namespace disconnect': 'Disconnected by server',
      'client namespace disconnect': 'User left',
      'ping timeout': 'Client was not responding to pings',
      'transport close': 'Client stopped sending data',
    };
    const desc = descriptions[reason] || reason; // fall back on reason "code" */
    const room = getroom(socket.client.id);
    if (room) {
      dotmocracies[room].members = dotmocracies[room].members
        .filter(({ userId }) => userId !== socket.client.id);
      socket.in(room).emit('remove user', socket.client.id);

      if (dotmocracies[room].decider === socket.client.id) {
        socket.in(room).emit('set decider', null);
      }

      if (dotmocracies[room].members.length === 0) {
        delete dotmocracies[room];
      }
    }
    delete names[socket.client.id];
  });
});
