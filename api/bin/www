#!/usr/bin/env node

/**
 * Module dependencies.
 */
const debug = require('debug')('api:server');
const http = require('http');
const socketio = require('socket.io');


const app = require('../app');

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (Number.isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP/HTTPS server.
 */


const server = http.createServer(app);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// websocket handler for dotmocracy
const io = socketio.listen(server);

const dotmocracy = io.of('/dotmocracy');


// in-memory cause I don't need these to persist (that will be a project for another day)
const names = {};
const dotmocracies = {};


dotmocracy.on('connection', (socket) => {
  socket.on('name', (name) => {
    const trimmedName = name.trim();
    if (trimmedName) {
      const oldname = names[socket.client.id];
      if (oldname) {
        socket.emit('msg', `Changing name from  ${oldname} to ${trimmedName}`);
      } else {
        socket.emit('msg', `Setting name to ${trimmedName}`);
      }
      names[socket.client.id] = trimmedName;
    }
  });

  socket.on('room', (room) => {
    const userId = socket.client.id;
    const nameOfUser = names[userId];
    if (!nameOfUser) {
      socket.emit('msg', 'No name found for your user id');
      // consider giving an error
      return;
    }
    socket.join(room);
    const userData = {
      userId,
      name: nameOfUser,
      votesCast: 0,
    };
    if (dotmocracies[room] === undefined) {
      dotmocracies[room] = {
        postits: [],
        members: [userData],
        normalVotes: 5,
        deciderVotes: 1,
        decider: userId,
        counter: 1,
      };
      socket.emit('msg', `Room ${room} created`);
    } else {
      dotmocracies[room].members.push(userData);
      socket.emit('msg', `Welcome to room ${room}.`);
    }
    socket.emit('init room', dotmocracies[room]);
    socket.in(room).emit('msg', `${nameOfUser} joined the room!`);
    socket.in(room).emit('new user', userData);
  });
});

dotmocracy.on('disconnect', (socket) => {
  const room = Object.keys(dotmocracies).find((roomname) => (
    dotmocracies[roomname].members.find(({ userId }) => userId === socket.client.id)));
  if (room) {
    dotmocracies[room].members = dotmocracies[room].members
      .filter(({ userId }) => userId !== socket.client.id);
    io.in(room).emit('remove user', socket.client.id);
    if (dotmocracies[room].members.length === 0) {
      delete dotmocracies[room];
    }
  }
  delete names[socket.client.id];
});
